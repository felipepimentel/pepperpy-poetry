{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Pepperpy Poetry Plugin","text":"<p>A Poetry plugin for shared configuration management across multiple projects in the pepperpy ecosystem.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Pepperpy Poetry Plugin is designed to simplify configuration management across multiple Python projects. It allows you to maintain a single source of truth for common configuration settings, ensuring consistency across your entire project ecosystem.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Shared Configuration Management: Automatically merge shared configurations from <code>pepperpy.toml</code> into your project's <code>pyproject.toml</code></li> <li>Template System: Rich template system with inheritance and variable substitution</li> <li>Environment Variables: Advanced environment variable management with validation</li> <li>Caching: Smart caching system for better performance</li> <li>CLI Commands: Intuitive commands for managing configurations and templates</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<ol> <li> <p>List available templates: <pre><code>poetry pepperpy list-templates\n</code></pre></p> </li> <li> <p>Initialize a new project with a template: <pre><code>poetry pepperpy init full\n</code></pre></p> </li> <li> <p>Or create a <code>pepperpy.toml</code> file manually: <pre><code># Use a predefined template\ntemplate = \"full\"\n\n[tool.poetry]\nname = \"my-python-package\"\ndescription = \"My Python Package\"\n\n[tool.pepperpy.env]\nGH_TOKEN = { required = true, secret = true, description = \"GitHub token for releases\" }\nPOETRY_PYPI_TOKEN_PYPI = { required = true, secret = true, description = \"PyPI token for publishing\" }\n</code></pre></p> </li> </ol>"},{"location":"#available-templates","title":"Available Templates","text":"<p>The plugin comes with several predefined templates:</p>"},{"location":"#base-template","title":"Base Template","text":"<p>Basic Python project setup with essential development tools.</p>"},{"location":"#full-template","title":"Full Template","text":"<p>Complete Python project setup with: - Modern Python development tools (Ruff, Black, MyPy) - Testing setup (Pytest with coverage) - Documentation (Sphinx) - CI/CD with semantic release - Pre-commit hooks - Automated version management</p>"},{"location":"#fastapi-template","title":"FastAPI Template","text":"<p>Complete FastAPI web application setup with: - FastAPI with Uvicorn - Pydantic for data validation - Authentication packages - API testing tools</p>"},{"location":"#cli-template","title":"CLI Template","text":"<p>Command-line application setup with: - Typer for CLI interface - Rich for beautiful terminal output - Click testing utilities</p>"},{"location":"#data-science-template","title":"Data Science Template","text":"<p>Data science project setup with: - NumPy and Pandas - Scikit-learn - Matplotlib and Seaborn - Jupyter notebooks</p>"},{"location":"#django-template","title":"Django Template","text":"<p>Django web application setup with: - Django with common extensions - Environment management - Authentication and forms - Development tools</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check out our Quick Start Guide to begin using the plugin in your projects.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#overview","title":"Overview","text":"<p>The Pepperpy Poetry Plugin provides a robust API for managing shared configurations across Poetry projects. The API is organized into several components:</p>"},{"location":"api/#configuration-system","title":"Configuration System","text":"<p>The configuration system is the core of the plugin, providing:</p> <ul> <li>Configuration Management: Load and parse <code>pepperpy.toml</code> files</li> <li>Template System: Define and inherit configuration templates</li> <li>Variable Resolution: Support for environment and template variables</li> <li>Caching: Smart caching system for better performance</li> </ul>"},{"location":"api/#main-components","title":"Main Components","text":"<ul> <li>Configuration: Core configuration classes and functionality</li> <li>Plugin: Poetry plugin implementation and integration</li> </ul>"},{"location":"api/#architecture","title":"Architecture","text":"<p>The plugin follows a modular architecture:</p> <pre><code>graph TD\n    A[Poetry Plugin] --&gt; B[Configuration Manager]\n    B --&gt; C[Template System]\n    B --&gt; D[Environment Variables]\n    B --&gt; E[Cache System]\n    C --&gt; F[Variable Resolution]\n    D --&gt; F\n</code></pre>"},{"location":"api/#key-features","title":"Key Features","text":"<ol> <li>Configuration Management</li> <li>Recursive file lookup</li> <li>TOML parsing and validation</li> <li> <p>Configuration merging</p> </li> <li> <p>Template System</p> </li> <li>Template inheritance</li> <li>Variable substitution</li> <li> <p>Override capability</p> </li> <li> <p>Environment Variables</p> </li> <li>Required/optional variables</li> <li>Default values</li> <li>Secret handling</li> <li> <p>Variable descriptions</p> </li> <li> <p>Caching System</p> </li> <li>TTL-based caching</li> <li>Size-limited cache</li> <li>Cache invalidation</li> <li>Performance optimization</li> </ol>"},{"location":"api/#usage-example","title":"Usage Example","text":"<p>Here's a simple example of using the plugin programmatically:</p> <pre><code>from pepperpy_poetry.config import PepperpyConfig\nfrom pathlib import Path\n\n# Load configuration\nconfig_path = Path(\"pepperpy.toml\")\nconfig_dict = toml.load(config_path)\nconfig = PepperpyConfig(config_dict)\n\n# Validate configuration\nerrors = config.validate()\nif errors:\n    print(\"Configuration errors:\", errors)\n    exit(1)\n\n# Get merged configuration with template\nmerged_config = config.get_merged_config(\"base\")\n\n# Access environment variables\nfor name, env_var in config.env_vars.items():\n    print(f\"{name}: {env_var.description}\")\n</code></pre>"},{"location":"api/#best-practices","title":"Best Practices","text":"<ol> <li>Template Usage</li> <li>Create base templates for common configurations</li> <li>Use template inheritance for specialization</li> <li> <p>Keep templates focused and modular</p> </li> <li> <p>Environment Variables</p> </li> <li>Mark sensitive data as <code>secret</code></li> <li>Provide clear descriptions</li> <li> <p>Use default values when appropriate</p> </li> <li> <p>Cache Configuration</p> </li> <li>Adjust TTL based on update frequency</li> <li>Set appropriate cache size limits</li> <li> <p>Monitor cache performance</p> </li> <li> <p>Configuration Structure</p> </li> <li>Keep configurations organized</li> <li>Use meaningful section names</li> <li>Document configuration options </li> </ol>"},{"location":"api/config/","title":"Configuration API","text":""},{"location":"api/config/#overview","title":"Overview","text":"<p>The Pepperpy Poetry Plugin uses a robust configuration system that supports: - Environment variable management - Configuration caching - Template inheritance - Variable substitution</p>"},{"location":"api/config/#classes","title":"Classes","text":""},{"location":"api/config/#pepperpyconfig","title":"PepperpyConfig","text":"<p>Main configuration class that handles all configuration aspects of the plugin.</p> <pre><code>class PepperpyConfig:\n    def __init__(self, config_dict: Dict[str, Any]):\n        \"\"\"\n        Initialize configuration from a dictionary.\n\n        Args:\n            config_dict: Raw configuration dictionary from pepperpy.toml\n        \"\"\"\n</code></pre>"},{"location":"api/config/#methods","title":"Methods","text":""},{"location":"api/config/#get_template","title":"get_template","text":"<pre><code>def get_template(self, name: str) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"\n    Get a template configuration with all inherited values resolved.\n\n    Args:\n        name: Name of the template\n\n    Returns:\n        Optional[Dict[str, Any]]: Resolved template configuration or None if not found\n    \"\"\"\n</code></pre>"},{"location":"api/config/#get_merged_config","title":"get_merged_config","text":"<pre><code>def get_merged_config(self, template_name: Optional[str] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get the final configuration with template and variables resolved.\n\n    Args:\n        template_name: Optional template to apply\n\n    Returns:\n        Dict[str, Any]: Final resolved configuration\n    \"\"\"\n</code></pre>"},{"location":"api/config/#validate","title":"validate","text":"<pre><code>def validate(self) -&gt; List[str]:\n    \"\"\"\n    Validate the configuration.\n\n    Returns:\n        List[str]: List of validation errors\n    \"\"\"\n</code></pre>"},{"location":"api/config/#envvarconfig","title":"EnvVarConfig","text":"<p>Configuration for environment variables.</p> <pre><code>@dataclass\nclass EnvVarConfig:\n    name: str\n    required: bool = False\n    default: Optional[str] = None\n    description: Optional[str] = None\n    secret: bool = False\n</code></pre>"},{"location":"api/config/#fields","title":"Fields","text":"<ul> <li><code>name</code>: Name of the environment variable</li> <li><code>required</code>: Whether the variable is required</li> <li><code>default</code>: Default value if not set</li> <li><code>description</code>: Description of the variable's purpose</li> <li><code>secret</code>: Whether the variable contains sensitive data</li> </ul>"},{"location":"api/config/#cacheconfig","title":"CacheConfig","text":"<p>Configuration for the caching system.</p> <pre><code>@dataclass\nclass CacheConfig:\n    enabled: bool = True\n    ttl: int = 3600  # seconds\n    max_size: int = 100  # number of entries\n</code></pre>"},{"location":"api/config/#fields_1","title":"Fields","text":"<ul> <li><code>enabled</code>: Whether caching is enabled</li> <li><code>ttl</code>: Time-to-live in seconds for cached entries</li> <li><code>max_size</code>: Maximum number of entries in the cache</li> </ul>"},{"location":"api/config/#templateconfig","title":"TemplateConfig","text":"<p>Configuration for templates.</p> <pre><code>@dataclass\nclass TemplateConfig:\n    name: str\n    description: Optional[str] = None\n    variables: Dict[str, str] = None\n    extends: Optional[str] = None\n</code></pre>"},{"location":"api/config/#fields_2","title":"Fields","text":"<ul> <li><code>name</code>: Name of the template</li> <li><code>description</code>: Description of the template's purpose</li> <li><code>variables</code>: Dictionary of template variables</li> <li><code>extends</code>: Name of the template to extend</li> </ul>"},{"location":"api/config/#usage-examples","title":"Usage Examples","text":""},{"location":"api/config/#environment-variables","title":"Environment Variables","text":"<pre><code>[tool.pepperpy.env]\nGITHUB_TOKEN = { required = true, secret = true, description = \"GitHub Personal Access Token\" }\nAWS_REGION = { default = \"us-east-1\", description = \"AWS Region for deployment\" }\n</code></pre>"},{"location":"api/config/#templates","title":"Templates","text":"<pre><code>[tool.pepperpy.templates.base]\ndescription = \"Base template for Python projects\"\nextends = \"minimal\"\nvariables = { PYTHON_VERSION = \"3.9\" }\n\n[tool.pepperpy.templates.base.tool.poetry]\npython = \"^${PYTHON_VERSION}\"\n</code></pre>"},{"location":"api/config/#cache-configuration","title":"Cache Configuration","text":"<pre><code>[tool.pepperpy.cache]\nenabled = true\nttl = 3600  # Cache time-to-live in seconds\nmax_size = 100  # Maximum number of cached configurations\n</code></pre>"},{"location":"api/config/#variable-substitution","title":"Variable Substitution","text":"<p>The plugin supports variable substitution in configuration values using the <code>${VARIABLE}</code> syntax:</p> <ul> <li>Environment variables: <code>${ENV_VAR}</code></li> <li>Template variables: <code>${TEMPLATE_VAR}</code></li> <li>Poetry variables: <code>${POETRY_PROJECT}</code>, <code>${POETRY_VERSION}</code></li> </ul> <p>Example: <pre><code>[tool.poetry]\ndescription = \"Project ${POETRY_PROJECT} version ${POETRY_VERSION}\"\npython = \"^${PYTHON_VERSION}\"\n</code></pre></p>"},{"location":"api/plugin/","title":"Plugin API","text":""},{"location":"api/plugin/#overview","title":"Overview","text":"<p>The Pepperpy Poetry Plugin provides a set of commands and APIs for managing shared configurations across Poetry projects.</p>"},{"location":"api/plugin/#commands","title":"Commands","text":""},{"location":"api/plugin/#list-templates","title":"List Templates","text":"<p>List all available templates and their details:</p> <pre><code>poetry pepperpy list-templates [--config=&lt;path&gt;]\n</code></pre> <p>Options: - <code>--config</code>: Path to pepperpy.toml file (optional)</p> <p>Example output: <pre><code>Available templates:\n\nbase\n  Description: Base template for Python projects\n  Variables:\n    PYTHON_VERSION = 3.9\n\nfastapi\n  Description: Template for FastAPI projects\n  Extends: base\n  Variables:\n    PYTHON_VERSION = 3.9\n    FASTAPI_VERSION = 0.109.0\n</code></pre></p>"},{"location":"api/plugin/#initialize-project","title":"Initialize Project","text":"<p>Initialize a new project with a template:</p> <pre><code>poetry pepperpy init [template] [--config=&lt;path&gt;] [--force]\n</code></pre> <p>Arguments: - <code>template</code>: Template to use (optional, interactive selection if not provided)</p> <p>Options: - <code>--config</code>: Path to pepperpy.toml file (optional) - <code>--force</code>: Overwrite existing files</p> <p>Example: <pre><code># Interactive template selection\npoetry pepperpy init\n\n# Use specific template\npoetry pepperpy init fastapi\n\n# Force overwrite existing files\npoetry pepperpy init django --force\n</code></pre></p>"},{"location":"api/plugin/#validate-configuration","title":"Validate Configuration","text":"<p>Validate your pepperpy configuration:</p> <pre><code>poetry pepperpy validate [--config=&lt;path&gt;]\n</code></pre> <p>Options: - <code>--config</code>: Path to pepperpy.toml file (optional)</p> <p>Example output: <pre><code>Configuration is valid.\n</code></pre></p> <p>Or with errors: <pre><code>Configuration validation failed:\n  - Invalid template 'unknown' referenced in extends\n  - Required environment variable 'GITHUB_TOKEN' not set\n</code></pre></p>"},{"location":"api/plugin/#plugin-class","title":"Plugin Class","text":""},{"location":"api/plugin/#sharedconfigplugin","title":"SharedConfigPlugin","text":"<p>The main plugin class that handles configuration management and command registration.</p> <pre><code>class SharedConfigPlugin(Plugin):\n    \"\"\"Poetry plugin for shared configuration management.\"\"\"\n\n    CONFIG_FILE = \"pepperpy.toml\"\n    PLUGIN_NAME = \"pepperpy-poetry\"\n    CACHE_DIR = \".pepperpy\"\n    CACHE_FILE = \"config_cache.json\"\n</code></pre>"},{"location":"api/plugin/#methods","title":"Methods","text":""},{"location":"api/plugin/#activate","title":"activate","text":"<pre><code>def activate(self, poetry: Poetry, io: IO) -&gt; None:\n    \"\"\"\n    Activate the plugin and merge shared configurations.\n\n    Args:\n        poetry: The Poetry instance\n        io: The IO instance for console output\n    \"\"\"\n</code></pre> <p>This method: 1. Registers plugin commands 2. Sets up configuration cache 3. Processes and merges configurations</p>"},{"location":"api/plugin/#_process_configuration","title":"_process_configuration","text":"<pre><code>def _process_configuration(self, poetry: Poetry, io: IO) -&gt; None:\n    \"\"\"\n    Process the pepperpy configuration file.\n\n    Args:\n        poetry: The Poetry instance\n        io: The IO instance for console output\n    \"\"\"\n</code></pre> <p>This method: 1. Finds the configuration file 2. Loads and validates configuration 3. Applies caching if enabled 4. Merges configurations into pyproject.toml</p>"},{"location":"api/plugin/#command-classes","title":"Command Classes","text":""},{"location":"api/plugin/#listtemplatescommand","title":"ListTemplatesCommand","text":"<pre><code>class ListTemplatesCommand(Command):\n    \"\"\"List available templates in the Pepperpy configuration.\"\"\"\n\n    name = \"pepperpy list-templates\"\n</code></pre>"},{"location":"api/plugin/#initcommand","title":"InitCommand","text":"<pre><code>class InitCommand(Command):\n    \"\"\"Initialize a new project with a template.\"\"\"\n\n    name = \"pepperpy init\"\n</code></pre>"},{"location":"api/plugin/#validatecommand","title":"ValidateCommand","text":"<pre><code>class ValidateCommand(Command):\n    \"\"\"Validate the Pepperpy configuration.\"\"\"\n\n    name = \"pepperpy validate\"\n</code></pre>"},{"location":"api/plugin/#usage-example","title":"Usage Example","text":"<pre><code>from pepperpy_poetry.plugin import SharedConfigPlugin\nfrom poetry.poetry import Poetry\nfrom cleo.io.io import IO\n\n# Create plugin instance\nplugin = SharedConfigPlugin()\n\n# Activate plugin\nplugin.activate(poetry, io)\n\n# Commands are now available through Poetry CLI\n</code></pre>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get started with the Pepperpy Poetry Plugin.</p>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":"<p>You can install the plugin using any of these methods:</p>"},{"location":"getting-started/quick-start/#using-pipx-recommended","title":"Using <code>pipx</code> (Recommended)","text":"<pre><code>pipx inject poetry pepperpy-poetry\n</code></pre>"},{"location":"getting-started/quick-start/#using-poetrys-plugin-manager","title":"Using Poetry's plugin manager","text":"<pre><code>poetry self add pepperpy-poetry\n</code></pre>"},{"location":"getting-started/quick-start/#using-pip-in-poetrys-environment","title":"Using pip in Poetry's environment","text":"<pre><code>$POETRY_HOME/bin/pip install pepperpy-poetry\n</code></pre>"},{"location":"getting-started/quick-start/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/quick-start/#1-list-available-templates","title":"1. List Available Templates","text":"<p>First, check what templates are available:</p> <pre><code>poetry pepperpy list-templates\n</code></pre> <p>This will show you all available templates with their descriptions and variables.</p>"},{"location":"getting-started/quick-start/#2-initialize-a-new-project","title":"2. Initialize a New Project","text":"<p>You can initialize a new project using any of the available templates:</p> <pre><code># Interactive template selection\npoetry pepperpy init\n\n# Or specify a template directly\npoetry pepperpy init fastapi\n</code></pre> <p>This will create a new <code>pyproject.toml</code> with all the necessary configurations.</p>"},{"location":"getting-started/quick-start/#3-manual-configuration","title":"3. Manual Configuration","text":"<p>Alternatively, you can create a <code>pepperpy.toml</code> file manually:</p> <pre><code># Use a predefined template\ntemplate = \"fastapi\"\n\n[tool.poetry]\nname = \"my-fastapi-app\"\nversion = \"0.1.0\"\ndescription = \"My FastAPI Application\"\nauthors = [\"Felipe Pimentel &lt;fpimentel88@gmail.com&gt;\"]\n\n[tool.pepperpy.env]\nGITHUB_TOKEN = { required = true, secret = true }\nAWS_REGION = { default = \"us-east-1\" }\n</code></pre>"},{"location":"getting-started/quick-start/#4-validate-configuration","title":"4. Validate Configuration","text":"<p>You can validate your configuration at any time:</p> <pre><code>poetry pepperpy validate\n</code></pre>"},{"location":"getting-started/quick-start/#available-templates","title":"Available Templates","text":"<p>The plugin comes with several predefined templates for different types of projects:</p>"},{"location":"getting-started/quick-start/#base-template","title":"Base Template","text":"<p>Basic Python project setup: <pre><code>poetry pepperpy init base\n</code></pre></p>"},{"location":"getting-started/quick-start/#fastapi-template","title":"FastAPI Template","text":"<p>Complete FastAPI web application setup: <pre><code>poetry pepperpy init fastapi\n</code></pre></p> <p>Includes: - FastAPI with Uvicorn - Pydantic for data validation - Authentication packages - API testing tools</p>"},{"location":"getting-started/quick-start/#cli-template","title":"CLI Template","text":"<p>Command-line application setup: <pre><code>poetry pepperpy init cli\n</code></pre></p> <p>Includes: - Typer for CLI interface - Rich for beautiful terminal output - Click testing utilities</p>"},{"location":"getting-started/quick-start/#data-science-template","title":"Data Science Template","text":"<p>Data science project setup: <pre><code>poetry pepperpy init data-science\n</code></pre></p> <p>Includes: - NumPy and Pandas - Scikit-learn - Matplotlib and Seaborn - Jupyter notebooks</p>"},{"location":"getting-started/quick-start/#django-template","title":"Django Template","text":"<p>Django web application setup: <pre><code>poetry pepperpy init django\n</code></pre></p> <p>Includes: - Django with common extensions - Environment management - Authentication and forms - Development tools</p>"},{"location":"getting-started/quick-start/#full-template","title":"Full Template","text":"<p>Complete Python project setup with modern tools: <pre><code>poetry pepperpy init full\n</code></pre></p> <p>Includes: - Modern Python development tools (Ruff, Black, MyPy) - Testing setup (Pytest with coverage) - Documentation (Sphinx) - CI/CD with semantic release - Pre-commit hooks - Automated version management - Coverage reporting - Type checking configuration</p> <p>Example usage: <pre><code>template = \"full\"\n\n[tool.poetry]\nname = \"my-python-package\"\ndescription = \"My Python Package\"\n\n[tool.pepperpy.env]\nGH_TOKEN = { required = true, secret = true, description = \"GitHub token for releases\" }\nPOETRY_PYPI_TOKEN_PYPI = { required = true, secret = true, description = \"PyPI token for publishing\" }\n</code></pre></p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about Configuration</li> <li>Check out Usage Examples</li> <li>Explore the API Reference</li> </ul>"},{"location":"user-guide/examples/","title":"Usage Examples","text":"<p>This guide provides practical examples of using the Pepperpy Poetry Plugin.</p>"},{"location":"user-guide/examples/#template-examples","title":"Template Examples","text":""},{"location":"user-guide/examples/#fastapi-project","title":"FastAPI Project","text":"<p>Create a new FastAPI project with authentication and API documentation:</p> <pre><code># Initialize project\npoetry pepperpy init fastapi\n\n# Install dependencies\npoetry install\n\n# Run development server\npoetry run uvicorn app.main:app --reload\n</code></pre> <p>Example <code>pepperpy.toml</code>: <pre><code>template = \"fastapi\"\n\n[tool.poetry]\nname = \"my-fastapi-app\"\nversion = \"0.1.0\"\ndescription = \"My FastAPI Application\"\nauthors = [\"Felipe Pimentel &lt;fpimentel88@gmail.com&gt;\"]\n\n[tool.pepperpy.env]\nJWT_SECRET = { required = true, secret = true, description = \"Secret key for JWT tokens\" }\nDATABASE_URL = { required = true, description = \"Database connection string\" }\n</code></pre></p>"},{"location":"user-guide/examples/#cli-application","title":"CLI Application","text":"<p>Create a command-line tool with rich terminal output:</p> <pre><code># Initialize project\npoetry pepperpy init cli\n\n# Install dependencies\npoetry install\n\n# Run CLI\npoetry run python -m my_cli\n</code></pre> <p>Example <code>pepperpy.toml</code>: <pre><code>template = \"cli\"\n\n[tool.poetry]\nname = \"my-cli-tool\"\nversion = \"0.1.0\"\ndescription = \"My CLI Tool\"\nauthors = [\"Felipe Pimentel &lt;fpimentel88@gmail.com&gt;\"]\n\n[tool.pepperpy.env]\nCONFIG_PATH = { default = \"~/.my-cli/config.json\", description = \"Configuration file path\" }\nLOG_LEVEL = { default = \"INFO\", description = \"Logging level\" }\n</code></pre></p>"},{"location":"user-guide/examples/#data-science-project","title":"Data Science Project","text":"<p>Set up a data science environment with Jupyter notebooks:</p> <pre><code># Initialize project\npoetry pepperpy init data-science\n\n# Install dependencies\npoetry install\n\n# Start Jupyter\npoetry run jupyter notebook\n</code></pre> <p>Example <code>pepperpy.toml</code>: <pre><code>template = \"data-science\"\n\n[tool.poetry]\nname = \"my-data-project\"\nversion = \"0.1.0\"\ndescription = \"My Data Science Project\"\nauthors = [\"Felipe Pimentel &lt;fpimentel88@gmail.com&gt;\"]\n\n[tool.pepperpy.env]\nDATA_PATH = { required = true, description = \"Path to data directory\" }\nMODEL_PATH = { default = \"models\", description = \"Path to save trained models\" }\n</code></pre></p>"},{"location":"user-guide/examples/#django-web-application","title":"Django Web Application","text":"<p>Create a Django project with authentication and forms:</p> <pre><code># Initialize project\npoetry pepperpy init django\n\n# Install dependencies\npoetry install\n\n# Run migrations\npoetry run python manage.py migrate\n\n# Start development server\npoetry run python manage.py runserver\n</code></pre> <p>Example <code>pepperpy.toml</code>: <pre><code>template = \"django\"\n\n[tool.poetry]\nname = \"my-django-app\"\nversion = \"0.1.0\"\ndescription = \"My Django Application\"\nauthors = [\"Felipe Pimentel &lt;fpimentel88@gmail.com&gt;\"]\n\n[tool.pepperpy.env]\nDJANGO_SECRET_KEY = { required = true, secret = true, description = \"Django secret key\" }\nDATABASE_URL = { required = true, description = \"Database connection string\" }\nALLOWED_HOSTS = { default = \"localhost,127.0.0.1\", description = \"Allowed hosts\" }\n</code></pre></p>"},{"location":"user-guide/examples/#command-examples","title":"Command Examples","text":""},{"location":"user-guide/examples/#list-templates-with-details","title":"List Templates with Details","text":"<pre><code>poetry pepperpy list-templates\n</code></pre>"},{"location":"user-guide/examples/#initialize-with-interactive-selection","title":"Initialize with Interactive Selection","text":"<pre><code>poetry pepperpy init\n</code></pre>"},{"location":"user-guide/examples/#initialize-with-specific-template","title":"Initialize with Specific Template","text":"<pre><code>poetry pepperpy init fastapi --force\n</code></pre>"},{"location":"user-guide/examples/#validate-configuration","title":"Validate Configuration","text":"<pre><code>poetry pepperpy validate\n</code></pre>"},{"location":"user-guide/examples/#using-custom-configuration-path","title":"Using Custom Configuration Path","text":"<pre><code>poetry pepperpy init --config=/path/to/pepperpy.toml\n</code></pre>"},{"location":"user-guide/examples/#template-inheritance-example","title":"Template Inheritance Example","text":"<p>Create a custom template that extends the base template:</p> <pre><code>[tool.pepperpy.templates.my-template]\ndescription = \"My custom template\"\nextends = \"base\"\nvariables = { \n    PYTHON_VERSION = \"3.9\",\n    CUSTOM_VAR = \"value\"\n}\n\n[tool.pepperpy.templates.my-template.tool.poetry.dependencies]\nrequests = \"^2.31.0\"\npyyaml = \"^6.0.1\"\n\n[tool.pepperpy.templates.my-template.tool.poetry.group.dev.dependencies]\npytest-mock = \"^3.12.0\"\n</code></pre>"},{"location":"user-guide/examples/#environment-variables-example","title":"Environment Variables Example","text":"<p>Configure environment variables with validation:</p> <pre><code>[tool.pepperpy.env]\n# Required secret\nAPI_KEY = { \n    required = true, \n    secret = true, \n    description = \"API key for external service\" \n}\n\n# Optional with default\nCACHE_TTL = { \n    default = \"3600\", \n    description = \"Cache time-to-live in seconds\" \n}\n\n# Dynamic value\nPROJECT_NAME = { \n    default = \"${POETRY_PROJECT}\", \n    description = \"Project name from Poetry\" \n}\n\n# Required with validation\nLOG_LEVEL = { \n    required = true, \n    default = \"INFO\",\n    description = \"Logging level (DEBUG, INFO, WARNING, ERROR)\" \n}\n</code></pre>"},{"location":"user-guide/examples/#cicd-with-github-actions","title":"CI/CD with GitHub Actions","text":"<p>When using the <code>full</code> template, you get a complete CI/CD setup with GitHub Actions. Here's what's included:</p>"},{"location":"user-guide/examples/#test-and-lint-workflow","title":"Test and Lint Workflow","text":"<pre><code>name: Test and Lint\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.12\"\n      - name: Install Poetry\n        run: |\n          curl -sSL https://install.python-poetry.org | python3 -\n      - name: Install dependencies\n        run: poetry install\n      - name: Run tests\n        run: poetry run pytest\n      - name: Run linting\n        run: |\n          poetry run ruff check .\n          poetry run ruff format --check .\n          poetry run mypy .\n\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.12\"\n      - name: Install Poetry\n        run: |\n          curl -sSL https://install.python-poetry.org | python3 -\n      - name: Install dependencies\n        run: poetry install\n      - name: Run security checks\n        run: poetry run bandit -r src/\n</code></pre>"},{"location":"user-guide/examples/#release-workflow","title":"Release Workflow","text":"<pre><code>name: Release\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    concurrency: release\n    permissions:\n      id-token: write\n      contents: write\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Python Semantic Release\n        uses: python-semantic-release/python-semantic-release@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"user-guide/examples/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>The <code>full</code> template includes pre-commit hooks for code quality. Here's the configuration:</p> <pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.3.0\n    hooks:\n      - id: ruff\n        args: [--fix]\n      - id: ruff-format\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.9.0\n    hooks:\n      - id: mypy\n        additional_dependencies:\n          - types-all\n\n  - repo: https://github.com/python-poetry/poetry\n    rev: 1.7.0\n    hooks:\n      - id: poetry-check\n      - id: poetry-lock\n</code></pre> <p>To set up pre-commit hooks:</p> <pre><code>poetry run pre-commit install\n</code></pre>"},{"location":"user-guide/examples/#release-process","title":"Release Process","text":"<p>The <code>full</code> template uses Python Semantic Release for automated versioning and publishing:</p> <ol> <li> <p>Write conventional commits: <pre><code># Features\ngit commit -m \"feat: add new feature\"\n\n# Bug fixes\ngit commit -m \"fix: resolve issue\"\n\n# Breaking changes\ngit commit -m \"feat!: redesign API\"\n</code></pre></p> </li> <li> <p>Push to main branch: <pre><code>git push origin main\n</code></pre></p> </li> <li> <p>The release workflow will:</p> </li> <li>Determine the next version based on commits</li> <li>Update version in pyproject.toml</li> <li>Create a new GitHub release</li> <li>Build and publish to PyPI</li> </ol>"},{"location":"user-guide/examples/#environment-variables","title":"Environment Variables","text":"<p>The <code>full</code> template includes robust environment variable validation:</p> <pre><code>[tool.pepperpy.env]\n# Required for releases\nGH_TOKEN = { \n    required = true, \n    secret = true, \n    description = \"GitHub token for releases\",\n    pattern = \"^gh[ps]_[A-Za-z0-9_]{36}$\"\n}\n\n# PyPI token for publishing\nPOETRY_PYPI_TOKEN_PYPI = { \n    required = true, \n    secret = true, \n    description = \"PyPI token for publishing\",\n    pattern = \"^pypi-[A-Za-z0-9_-]{100,}$\"\n}\n\n# Optional configuration\nLOG_LEVEL = { \n    default = \"INFO\", \n    description = \"Logging level\",\n    choices = [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"]\n}\n</code></pre>"},{"location":"user-guide/examples/#cache-configuration","title":"Cache Configuration","text":"<p>Advanced caching options:</p> <pre><code>[tool.pepperpy.cache]\nenabled = true\nttl = 3600  # Cache time-to-live in seconds\nmax_size = 100  # Maximum number of cached configurations\ncleanup_interval = 86400  # Cleanup old cache entries daily\n</code></pre>"},{"location":"user-guide/examples/#commands","title":"Commands","text":""},{"location":"user-guide/examples/#update-dependencies","title":"Update Dependencies","text":"<pre><code># Update all dependencies\npoetry pepperpy update-deps\n\n# Update specific dependencies\npoetry pepperpy update-deps pytest ruff\n\n# Check for updates without applying\npoetry pepperpy update-deps --check\n</code></pre>"},{"location":"user-guide/examples/#validate-cicd","title":"Validate CI/CD","text":"<pre><code># Validate GitHub Actions workflows\npoetry pepperpy validate-ci\n\n# Validate specific workflow\npoetry pepperpy validate-ci .github/workflows/test.yml\n</code></pre>"},{"location":"user-guide/examples/#generate-configurations","title":"Generate Configurations","text":"<pre><code># Generate all config files\npoetry pepperpy generate-config\n\n# Generate specific config\npoetry pepperpy generate-config pre-commit\npoetry pepperpy generate-config github-actions\n</code></pre>"},{"location":"user-guide/examples/#update-python-version","title":"Update Python Version","text":"<p>Update Python version across all configuration files:</p> <pre><code># Update to specific version\npoetry pepperpy update-python 3.12.0\n\n# Update using version from .python-version\npoetry pepperpy update-python\n</code></pre> <p>This will update: - <code>.python-version</code> file - Python version in <code>pyproject.toml</code> - Template configurations</p>"},{"location":"user-guide/examples/#common-project-files","title":"Common Project Files","text":"<p>The base template includes common configuration files:</p>"},{"location":"user-guide/examples/#pre-commit-configuration","title":"Pre-commit Configuration","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: pytest\n        name: pytest\n        entry: poetry run pytest\n        language: system\n        pass_filenames: false\n        always_run: true\n\n      - id: ruff-check\n        name: ruff check\n        entry: poetry run ruff check --fix .\n        language: system\n        pass_filenames: false\n        always_run: true\n\n      - id: ruff-format\n        name: ruff format\n        entry: poetry run ruff format .\n        language: system\n        pass_filenames: false\n        always_run: true\n</code></pre>"},{"location":"user-guide/examples/#python-version","title":"Python Version","text":"<pre><code># .python-version\n3.12.0\n</code></pre>"},{"location":"user-guide/examples/#dagger-configuration","title":"Dagger Configuration","text":"<pre><code># dagger.json\n{\n    \"name\": \"${PROJECT_NAME}\",\n    \"sdk\": \"python\"\n}\n</code></pre>"},{"location":"user-guide/examples/#vscode-settings","title":"VSCode Settings","text":"<pre><code># .vscode/settings.json\n{\n    \"python.analysis.typeCheckingMode\": \"basic\",\n    \"python.testing.pytestEnabled\": true,\n    \"python.testing.unittestEnabled\": false,\n    \"python.testing.nosetestsEnabled\": false,\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n        \"source.fixAll\": true,\n        \"source.organizeImports\": true\n    },\n    \"[python]\": {\n        \"editor.defaultFormatter\": \"charliermarsh.ruff\"\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/#pytest-configuration","title":"Pytest Configuration","text":"<pre><code># pytest.ini\n[pytest]\nasyncio_mode = auto\nasyncio_default_fixture_loop_scope = function\naddopts = --cov=${PROJECT_NAME} --cov-report=term-missing --cov-report=xml\nfilterwarnings =\n    ignore::pytest.PytestCollectionWarning\n    ignore::pytest.PytestReturnNotNoneWarning\n    ignore::pytest.PytestUnraisableExceptionWarning\n    ignore::RuntimeWarning\n    ignore::DeprecationWarning\n    ignore::PendingDeprecationWarning\n</code></pre> <p>You can generate these files using:</p> <pre><code>poetry pepperpy generate-config\n</code></pre> <p>Or generate specific files:</p> <pre><code>poetry pepperpy generate-config pre-commit\npoetry pepperpy generate-config python-version\npoetry pepperpy generate-config dagger\n</code></pre>"},{"location":"user-guide/examples/#documentation","title":"Documentation","text":""},{"location":"user-guide/examples/#build-and-deploy","title":"Build and Deploy","text":"<p>Build and deploy documentation to GitHub Pages:</p> <pre><code># Deploy to GitHub Pages\npoetry pepperpy docs\n\n# Serve locally\npoetry pepperpy docs --serve\n\n# Serve on specific port\npoetry pepperpy docs --serve --port 8080\n</code></pre> <p>The documentation is built using MkDocs with the Material theme and includes: - API Reference with automatic docstring parsing - Code syntax highlighting - Dark/light mode support - Full-text search - Mobile-friendly responsive design</p>"},{"location":"user-guide/examples/#configuration","title":"Configuration","text":"<p>The base template includes MkDocs configuration in <code>mkdocs.yml</code>:</p> <pre><code>site_name: Your Project Name\nsite_description: Your project description\nsite_author: Your Name\nrepo_url: https://github.com/username/repo\nrepo_name: username/repo\n\ntheme:\n  name: material\n  palette:\n    - scheme: default\n      primary: indigo\n      accent: indigo\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n    - scheme: slate\n      primary: indigo\n      accent: indigo\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n\nplugins:\n  - search\n  - mkdocstrings:\n      handlers:\n        python:\n          options:\n            show_source: true\n            show_root_heading: true\n\nnav:\n  - Home: index.md\n  - API Reference: api.md\n</code></pre>"}]}