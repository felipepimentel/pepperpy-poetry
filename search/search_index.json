{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Pepperpy Poetry Plugin","text":"<p>A Poetry plugin for shared configuration management across multiple projects in the pepperpy ecosystem.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Pepperpy Poetry Plugin is designed to simplify configuration management across multiple Python projects. It allows you to maintain a single source of truth for common configuration settings, ensuring consistency across your entire project ecosystem.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Shared Configuration Management: Automatically merge shared configurations from <code>shared-config.toml</code> into your project's <code>pyproject.toml</code></li> <li>Flexible Configuration: Support for any TOML configuration sections</li> <li>User-Friendly: Clear console feedback during configuration merging</li> <li>Error Handling: Graceful handling of missing configuration files and errors</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<ol> <li>Create a <code>shared-config.toml</code> in your project root:</li> </ol> <pre><code>[tool.ruff]\nline-length = 88\ntarget-version = \"py312\"\nextend-exclude = [\n    \".pytest_cache\",\n    \".ruff_cache\",\n    \".venv\",\n    \".git\",\n    \"__pycache__\"\n]\n\n[tool.mypy]\npython_version = \"3.12\"\nstrict = true\nwarn_return_any = true\nwarn_unused_configs = true\n</code></pre> <ol> <li>The plugin will automatically merge these configurations into your project's <code>pyproject.toml</code> when Poetry runs.</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check out our Quick Start Guide to begin using the plugin in your projects.</p>"},{"location":"api/plugin/","title":"API Reference","text":"<p>This page documents the API of the Pepperpy Poetry Plugin.</p>"},{"location":"api/plugin/#sharedconfigplugin","title":"SharedConfigPlugin","text":""},{"location":"api/plugin/#pepperpy_poetry.plugin.SharedConfigPlugin","title":"<code>pepperpy_poetry.plugin.SharedConfigPlugin</code>","text":"<p>               Bases: <code>Plugin</code></p> Source code in <code>pepperpy_poetry/plugin.py</code> <pre><code>class SharedConfigPlugin(Plugin):\n    def activate(self, poetry: Poetry, io: IO) -&gt; None:\n        \"\"\"\n        Activate the plugin and merge shared configurations.\n\n        Args:\n            poetry: The Poetry instance\n            io: The IO instance for console output\n        \"\"\"\n        shared_config_path = Path(\"shared-config.toml\")\n\n        if shared_config_path.exists():\n            io.write_line(\"[pepperpy-poetry] Loading shared configurations...\")\n            try:\n                shared_config = toml.load(shared_config_path)\n                self._merge_configurations(poetry, shared_config)\n                io.write_line(\"[pepperpy-poetry] Shared configurations loaded successfully\")\n            except Exception as e:\n                io.write_error_line(f\"[pepperpy-poetry] Error loading shared configurations: {str(e)}\")\n        else:\n            io.write_line(\"[pepperpy-poetry] No shared-config.toml found. Skipping.\")\n\n    def _merge_configurations(self, poetry: Poetry, shared_config: Dict[str, Any]) -&gt; None:\n        \"\"\"\n        Merge shared configurations into the project's pyproject.toml\n\n        Args:\n            poetry: The Poetry instance\n            shared_config: The shared configuration dictionary\n        \"\"\"\n        for section, values in shared_config.items():\n            if isinstance(values, dict):\n                poetry.pyproject.data.setdefault(section, {}).update(values)\n            else:\n                poetry.pyproject.data[section] = values \n</code></pre>"},{"location":"api/plugin/#pepperpy_poetry.plugin.SharedConfigPlugin.activate","title":"<code>activate(poetry, io)</code>","text":"<p>Activate the plugin and merge shared configurations.</p> <p>Parameters:</p> Name Type Description Default <code>poetry</code> <code>Poetry</code> <p>The Poetry instance</p> required <code>io</code> <code>IO</code> <p>The IO instance for console output</p> required Source code in <code>pepperpy_poetry/plugin.py</code> <pre><code>def activate(self, poetry: Poetry, io: IO) -&gt; None:\n    \"\"\"\n    Activate the plugin and merge shared configurations.\n\n    Args:\n        poetry: The Poetry instance\n        io: The IO instance for console output\n    \"\"\"\n    shared_config_path = Path(\"shared-config.toml\")\n\n    if shared_config_path.exists():\n        io.write_line(\"[pepperpy-poetry] Loading shared configurations...\")\n        try:\n            shared_config = toml.load(shared_config_path)\n            self._merge_configurations(poetry, shared_config)\n            io.write_line(\"[pepperpy-poetry] Shared configurations loaded successfully\")\n        except Exception as e:\n            io.write_error_line(f\"[pepperpy-poetry] Error loading shared configurations: {str(e)}\")\n    else:\n        io.write_line(\"[pepperpy-poetry] No shared-config.toml found. Skipping.\")\n</code></pre>"},{"location":"api/plugin/#configuration-types","title":"Configuration Types","text":""},{"location":"api/plugin/#shared-configuration","title":"Shared Configuration","text":"<p>The shared configuration is loaded from the <code>shared-config.toml</code> file and follows this structure:</p> <pre><code>Dict[str, Union[Dict, List, str, int, float, bool]]\n</code></pre> <p>Example: <pre><code>[tool.ruff]\nline-length = 88  # int\ntarget-version = \"py312\"  # str\nextend-exclude = [  # List[str]\n    \".pytest_cache\",\n    \".ruff_cache\"\n]\n\n[tool.mypy]  # Nested dict\npython_version = \"3.12\"\nstrict = true  # bool\n</code></pre></p>"},{"location":"api/plugin/#plugin-lifecycle","title":"Plugin Lifecycle","text":"<ol> <li>Activation: The plugin is activated when Poetry starts</li> <li>Configuration Loading: The plugin searches for and loads the <code>shared-config.toml</code> file</li> <li>Configuration Merging: The shared configurations are merged into the project's <code>pyproject.toml</code></li> <li>Feedback: The plugin provides console feedback about the process</li> </ol>"},{"location":"api/plugin/#error-handling","title":"Error Handling","text":"<p>The plugin handles various error scenarios:</p> <ol> <li>Missing Configuration File: A warning message is displayed</li> <li>Invalid TOML: An error message with details about the parsing error</li> <li>Permission Issues: An error message about file access problems</li> <li>Merge Conflicts: Detailed information about conflicting configurations</li> </ol>"},{"location":"api/plugin/#console-output","title":"Console Output","text":"<p>The plugin provides feedback through Poetry's console:</p> <pre><code># Success case\n[pepperpy-poetry] Loading shared configurations...\n[pepperpy-poetry] Shared configurations loaded successfully\n\n# Warning case\n[pepperpy-poetry] No shared-config.toml found. Skipping.\n\n# Error case\n[pepperpy-poetry] Error loading shared configurations: [error details]\n</code></pre>"},{"location":"api/plugin/#integration-points","title":"Integration Points","text":"<p>The plugin integrates with Poetry through:</p> <ol> <li>The <code>poetry.plugins.Plugin</code> interface</li> <li>Poetry's configuration management system</li> <li>The console I/O system for user feedback</li> </ol>"},{"location":"contributing/development/","title":"Development Setup","text":"<p>This guide will help you set up your development environment to contribute to the Pepperpy Poetry Plugin.</p>"},{"location":"contributing/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12 or higher</li> <li>Poetry installed on your system</li> <li>Git for version control</li> </ul>"},{"location":"contributing/development/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/felipepimentel/pepperpy-poetry\ncd pepperpy-poetry\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Install the plugin in development mode: <pre><code>poetry self add .\n</code></pre></p> </li> </ol>"},{"location":"contributing/development/#project-structure","title":"Project Structure","text":"<pre><code>pepperpy-poetry/\n\u251c\u2500\u2500 pepperpy_poetry/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 plugin.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_plugin.py\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 shared-config.toml\n</code></pre>"},{"location":"contributing/development/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a new branch for your feature: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes and write tests</p> </li> <li> <p>Run the test suite: <pre><code>poetry run pytest\n</code></pre></p> </li> <li> <p>Format your code: <pre><code>poetry run ruff format .\n</code></pre></p> </li> <li> <p>Run linting: <pre><code>poetry run ruff check .\npoetry run mypy .\n</code></pre></p> </li> <li> <p>Commit your changes: <pre><code>git add .\ngit commit -m \"feat: your feature description\"\n</code></pre></p> </li> </ol>"},{"location":"contributing/development/#testing","title":"Testing","text":""},{"location":"contributing/development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npoetry run pytest\n\n# Run with coverage\npoetry run pytest --cov=pepperpy_poetry\n\n# Run specific test file\npoetry run pytest tests/test_plugin.py\n</code></pre>"},{"location":"contributing/development/#writing-tests","title":"Writing Tests","text":"<ol> <li>Create test files in the <code>tests/</code> directory</li> <li>Use descriptive test names</li> <li>Follow the existing test patterns</li> <li>Include both positive and negative test cases</li> </ol> <p>Example test: <pre><code>def test_shared_config_loading():\n    # Setup\n    plugin = SharedConfigPlugin()\n\n    # Test\n    result = plugin.load_config()\n\n    # Assert\n    assert result is not None\n</code></pre></p>"},{"location":"contributing/development/#documentation","title":"Documentation","text":""},{"location":"contributing/development/#building-documentation","title":"Building Documentation","text":"<pre><code># Install documentation dependencies\npoetry install --with docs\n\n# Build documentation\nmkdocs build\n\n# Serve documentation locally\nmkdocs serve\n</code></pre>"},{"location":"contributing/development/#writing-documentation","title":"Writing Documentation","text":"<ol> <li>Documentation is written in Markdown</li> <li>Place new documentation in the appropriate directory under <code>docs/</code></li> <li>Update <code>mkdocs.yml</code> if adding new pages</li> <li>Include code examples where appropriate</li> </ol>"},{"location":"contributing/development/#release-process","title":"Release Process","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update CHANGELOG.md</li> <li>Create a release commit: <pre><code>git add pyproject.toml CHANGELOG.md\ngit commit -m \"chore: release v0.1.1\"\n</code></pre></li> <li>Tag the release: <pre><code>git tag v0.1.1\n</code></pre></li> <li>Push changes: <pre><code>git push origin main --tags\n</code></pre></li> </ol>"},{"location":"contributing/development/#getting-help","title":"Getting Help","text":"<ul> <li>Open an issue on GitHub</li> <li>Join our community discussions</li> <li>Check existing documentation and issues</li> </ul>"},{"location":"contributing/guide/","title":"Contributing Guide","text":"<p>Thank you for considering contributing to the Pepperpy Poetry Plugin! This document provides guidelines and best practices for contributing.</p>"},{"location":"contributing/guide/#code-of-conduct","title":"Code of Conduct","text":"<p>We expect all contributors to follow our Code of Conduct:</p> <ol> <li>Be respectful and inclusive</li> <li>Use welcoming and inclusive language</li> <li>Be collaborative</li> <li>Accept constructive criticism gracefully</li> <li>Focus on what is best for the community</li> </ol>"},{"location":"contributing/guide/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contributing/guide/#reporting-bugs","title":"Reporting Bugs","text":"<ol> <li>Check if the bug has already been reported</li> <li>Create a new issue using the bug report template</li> <li>Include:</li> <li>Python version</li> <li>Poetry version</li> <li>Plugin version</li> <li>Steps to reproduce</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Any relevant logs or error messages</li> </ol>"},{"location":"contributing/guide/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<ol> <li>Check if the enhancement has been suggested</li> <li>Create a new issue using the feature request template</li> <li>Describe:</li> <li>The problem you're trying to solve</li> <li>Your proposed solution</li> <li>Alternative solutions you've considered</li> <li>Examples of how the feature would be used</li> </ol>"},{"location":"contributing/guide/#pull-requests","title":"Pull Requests","text":"<ol> <li>Fork the repository</li> <li>Create a new branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> <li>Make your changes</li> <li>Write or update tests</li> <li>Update documentation</li> <li>Run tests and linting</li> <li>Commit your changes:    <pre><code>git add .\ngit commit -m \"feat: your feature description\"\n</code></pre></li> <li>Push to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Create a Pull Request</li> </ol>"},{"location":"contributing/guide/#development-guidelines","title":"Development Guidelines","text":""},{"location":"contributing/guide/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines</li> <li>Use type hints</li> <li>Keep functions and methods focused and small</li> <li>Write descriptive variable and function names</li> <li>Add docstrings to all public functions and classes</li> </ul>"},{"location":"contributing/guide/#testing","title":"Testing","text":"<ul> <li>Write tests for all new features</li> <li>Maintain or improve test coverage</li> <li>Test edge cases and error conditions</li> <li>Use meaningful test names and descriptions</li> </ul>"},{"location":"contributing/guide/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for new features</li> <li>Include docstrings with type hints</li> <li>Add examples for new functionality</li> <li>Keep the README.md up to date</li> <li>Document breaking changes</li> </ul>"},{"location":"contributing/guide/#commit-messages","title":"Commit Messages","text":"<p>Follow the Conventional Commits specification:</p> <ul> <li><code>feat:</code> for new features</li> <li><code>fix:</code> for bug fixes</li> <li><code>docs:</code> for documentation changes</li> <li><code>style:</code> for code style changes</li> <li><code>refactor:</code> for code refactoring</li> <li><code>test:</code> for adding or modifying tests</li> <li><code>chore:</code> for maintenance tasks</li> </ul> <p>Example: <pre><code>feat: add support for nested configuration merging\n\n- Add recursive merging for nested dictionaries\n- Update documentation with new feature\n- Add tests for nested merging\n</code></pre></p>"},{"location":"contributing/guide/#review-process","title":"Review Process","text":"<ol> <li>All code changes require review</li> <li>Address review comments promptly</li> <li>Keep discussions focused and professional</li> <li>Be open to suggestions and feedback</li> <li>Update your PR based on reviews</li> </ol>"},{"location":"contributing/guide/#getting-help","title":"Getting Help","text":"<p>If you need help with your contribution:</p> <ol> <li>Check the documentation</li> <li>Look for similar issues</li> <li>Ask questions in discussions</li> <li>Reach out to maintainers</li> </ol>"},{"location":"contributing/guide/#recognition","title":"Recognition","text":"<p>We value all contributions and will:</p> <ol> <li>Credit contributors in release notes</li> <li>Maintain an up-to-date CONTRIBUTORS.md</li> <li>Acknowledge significant contributions</li> <li>Welcome new maintainers based on consistent quality contributions</li> </ol>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>There are several ways to install the Pepperpy Poetry Plugin. Choose the method that best suits your workflow.</p>"},{"location":"getting-started/installation/#using-poetrys-self-add-command","title":"Using Poetry's self add command","text":"<p>The recommended way to install the plugin is using Poetry's <code>self add</code> command:</p> <pre><code>poetry self add pepperpy-poetry\n</code></pre>"},{"location":"getting-started/installation/#using-pipx-inject","title":"Using pipx inject","text":"<p>If you installed Poetry using <code>pipx</code>, you can add the plugin using the <code>pipx inject</code> command:</p> <pre><code>pipx inject poetry pepperpy-poetry\n</code></pre> <p>To uninstall using pipx:</p> <pre><code># For pipx versions &gt;= 1.2.0\npipx uninject poetry pepperpy-poetry\n\n# For pipx versions &lt; 1.2.0\npipx runpip poetry uninstall pepperpy-poetry\n</code></pre>"},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<p>You can also install the plugin using pip in Poetry's virtual environment:</p> <pre><code>$POETRY_HOME/bin/pip install --user pepperpy-poetry\n</code></pre> <p>To uninstall:</p> <pre><code>$POETRY_HOME/bin/pip uninstall pepperpy-poetry\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that the plugin is installed correctly, you can run:</p> <pre><code>poetry self show plugins\n</code></pre> <p>You should see <code>pepperpy-poetry</code> listed in the output.</p>"},{"location":"getting-started/installation/#project-specific-installation","title":"Project-specific Installation","text":"<p>You can also specify the plugin as a project requirement in your <code>pyproject.toml</code>:</p> <pre><code>[tool.poetry.requires-plugins]\npepperpy-poetry = \"^0.1.0\"\n</code></pre> <p>This will install the plugin only for the current project under <code>.poetry/plugins</code> in the project's directory.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get started with the Pepperpy Poetry Plugin quickly.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Poetry installed on your system</li> <li>Basic understanding of Poetry and TOML configuration files</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":"<p>Install the plugin using Poetry's <code>self add</code> command:</p> <pre><code>poetry self add pepperpy-poetry\n</code></pre>"},{"location":"getting-started/quick-start/#basic-usage","title":"Basic Usage","text":"<ol> <li>Create a <code>shared-config.toml</code> file in your project root:</li> </ol> <pre><code>[tool.ruff]\nline-length = 88\ntarget-version = \"py312\"\nextend-exclude = [\n    \".pytest_cache\",\n    \".ruff_cache\",\n    \".venv\",\n    \".git\",\n    \"__pycache__\"\n]\n\n[tool.mypy]\npython_version = \"3.12\"\nstrict = true\nwarn_return_any = true\nwarn_unused_configs = true\n</code></pre> <ol> <li> <p>The plugin will automatically merge these configurations into your project's <code>pyproject.toml</code> when Poetry runs.</p> </li> <li> <p>You can verify the merged configurations by checking your project's <code>pyproject.toml</code> file.</p> </li> </ol>"},{"location":"getting-started/quick-start/#how-it-works","title":"How It Works","text":"<ol> <li>When Poetry runs, the plugin automatically detects the presence of <code>shared-config.toml</code></li> <li>If found, it reads the configurations from this file</li> <li>The configurations are then merged into your project's <code>pyproject.toml</code></li> <li>Any existing configurations in <code>pyproject.toml</code> are preserved, with shared configurations being merged in</li> </ol>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the Configuration Guide for detailed configuration options</li> <li>See Usage Examples for more advanced use cases</li> <li>Read the API Reference for technical details</li> </ul>"},{"location":"user-guide/configuration/","title":"Configuration Guide","text":"<p>This guide explains how to configure and customize the Pepperpy Poetry Plugin for your needs.</p>"},{"location":"user-guide/configuration/#shared-configuration-file","title":"Shared Configuration File","text":"<p>The plugin looks for a <code>shared-config.toml</code> file in your project's root directory. This file contains the shared configurations that will be merged into your project's <code>pyproject.toml</code>.</p>"},{"location":"user-guide/configuration/#file-location","title":"File Location","text":"<p>By default, the plugin looks for <code>shared-config.toml</code> in:</p> <ol> <li>The current project's root directory</li> <li>The parent directory of the project (useful for monorepos)</li> </ol>"},{"location":"user-guide/configuration/#file-format","title":"File Format","text":"<p>The <code>shared-config.toml</code> file uses TOML format and can contain any valid TOML configuration. Here's an example:</p> <pre><code>[tool.ruff]\nline-length = 88\ntarget-version = \"py312\"\nextend-exclude = [\n    \".pytest_cache\",\n    \".ruff_cache\",\n    \".venv\",\n    \".git\",\n    \"__pycache__\"\n]\n\n[tool.mypy]\npython_version = \"3.12\"\nstrict = true\nwarn_return_any = true\nwarn_unused_configs = true\n\n[tool.pytest.ini_options]\nminversion = \"6.0\"\naddopts = \"-ra -q\"\ntestpaths = [\n    \"tests\",\n]\n</code></pre>"},{"location":"user-guide/configuration/#configuration-merging","title":"Configuration Merging","text":""},{"location":"user-guide/configuration/#merging-rules","title":"Merging Rules","text":"<ol> <li>New Sections: If a section in <code>shared-config.toml</code> doesn't exist in <code>pyproject.toml</code>, it's added entirely</li> <li>Existing Sections: For sections that exist in both files:</li> <li>Dictionary values are merged recursively</li> <li>Lists are extended</li> <li>Scalar values from <code>shared-config.toml</code> override those in <code>pyproject.toml</code></li> </ol>"},{"location":"user-guide/configuration/#example","title":"Example","text":"<p>If your <code>shared-config.toml</code> contains: <pre><code>[tool.ruff]\nline-length = 88\nextend-exclude = [\".venv\"]\n</code></pre></p> <p>And your <code>pyproject.toml</code> contains: <pre><code>[tool.ruff]\nline-length = 100\ntarget-version = \"py312\"\n</code></pre></p> <p>The result will be: <pre><code>[tool.ruff]\nline-length = 88  # From shared-config.toml\ntarget-version = \"py312\"  # From pyproject.toml\nextend-exclude = [\".venv\"]  # From shared-config.toml\n</code></pre></p>"},{"location":"user-guide/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Keep It Simple: Only include configurations that should be truly shared across projects</li> <li>Version Control: Track your <code>shared-config.toml</code> in version control</li> <li>Documentation: Document any project-specific overrides in your project's README</li> <li>Validation: Regularly validate that shared configurations work across all projects</li> </ol>"},{"location":"user-guide/examples/","title":"Usage Examples","text":"<p>This guide provides practical examples of using the Pepperpy Poetry Plugin in different scenarios.</p>"},{"location":"user-guide/examples/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/examples/#sharing-common-tool-configurations","title":"Sharing Common Tool Configurations","text":"<pre><code># shared-config.toml\n[tool.ruff]\nline-length = 88\ntarget-version = \"py312\"\nextend-exclude = [\n    \".pytest_cache\",\n    \".ruff_cache\",\n    \".venv\",\n    \".git\",\n    \"__pycache__\"\n]\n\n[tool.mypy]\npython_version = \"3.12\"\nstrict = true\nwarn_return_any = true\nwarn_unused_configs = true\n</code></pre>"},{"location":"user-guide/examples/#project-specific-overrides","title":"Project-Specific Overrides","text":"<pre><code># pyproject.toml\n[tool.ruff]\n# Override line length for this specific project\nline-length = 100\n# Add project-specific excludes while keeping shared ones\nextend-exclude = [\n    \"legacy_code\",\n    \"generated\"\n]\n</code></pre>"},{"location":"user-guide/examples/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user-guide/examples/#monorepo-configuration","title":"Monorepo Configuration","text":"<pre><code>my-monorepo/\n\u251c\u2500\u2500 shared-config.toml\n\u251c\u2500\u2500 project-a/\n\u2502   \u2514\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 project-b/\n    \u2514\u2500\u2500 pyproject.toml\n</code></pre> <pre><code># my-monorepo/shared-config.toml\n[tool.ruff]\nline-length = 88\ntarget-version = \"py312\"\n\n[tool.mypy]\npython_version = \"3.12\"\nstrict = true\n\n[tool.pytest.ini_options]\nminversion = \"6.0\"\naddopts = \"-ra -q\"\n</code></pre>"},{"location":"user-guide/examples/#complex-configuration-merging","title":"Complex Configuration Merging","text":"<pre><code># shared-config.toml\n[tool.poetry.dependencies]\npython = \"^3.12\"\nrequests = \"^2.31.0\"\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^8.0.0\"\npytest-cov = \"^4.1.0\"\nruff = \"^0.3.0\"\nmypy = \"^1.8.0\"\n\n[tool.ruff.lint]\nselect = [\n    \"E\",   # pycodestyle errors\n    \"W\",   # pycodestyle warnings\n    \"F\",   # pyflakes\n    \"I\",   # isort\n    \"N\",   # pep8-naming\n]\nignore = [\"E501\"]  # line length\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n</code></pre>"},{"location":"user-guide/examples/#testing-configuration","title":"Testing Configuration","text":"<pre><code># shared-config.toml\n[tool.pytest.ini_options]\nminversion = \"6.0\"\naddopts = \"-ra -q --cov\"\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_classes = [\"Test*\"]\npython_functions = [\"test_*\"]\n\n[tool.coverage.run]\nbranch = true\nsource = [\"pepperpy_poetry\"]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"raise NotImplementedError\",\n    \"if __name__ == .__main__.:\",\n    \"pass\",\n]\n</code></pre>"},{"location":"user-guide/examples/#real-world-examples","title":"Real-World Examples","text":""},{"location":"user-guide/examples/#django-project-setup","title":"Django Project Setup","text":"<pre><code># shared-config.toml\n[tool.poetry.dependencies]\npython = \"^3.12\"\ndjango = \"^5.0\"\ndjango-environ = \"^0.11.2\"\npsycopg = \"^3.1.18\"\n\n[tool.poetry.group.dev.dependencies]\ndjango-debug-toolbar = \"^4.3.0\"\nfactory-boy = \"^3.3.0\"\n\n[tool.ruff]\nextend-exclude = [\n    \"*/migrations/*\",\n    \"manage.py\"\n]\n\n[tool.mypy]\nplugins = [\"mypy_django_plugin.main\"]\n\n[tool.mypy.plugins.django-stubs]\ndjango_settings_module = \"config.settings.development\"\n</code></pre>"},{"location":"user-guide/examples/#fastapi-microservice","title":"FastAPI Microservice","text":"<pre><code># shared-config.toml\n[tool.poetry.dependencies]\npython = \"^3.12\"\nfastapi = \"^0.109.0\"\nuvicorn = \"^0.27.0\"\npydantic = \"^2.6.0\"\nsqlalchemy = \"^2.0.25\"\n\n[tool.poetry.group.dev.dependencies]\nhttpx = \"^0.26.0\"\npytest-asyncio = \"^0.23.5\"\n\n[tool.ruff]\nselect = [\n    \"E\",\n    \"F\",\n    \"I\",\n    \"N\",\n    \"B\",  # flake8-bugbear\n    \"S\",  # flake8-bandit\n]\n\n[tool.mypy]\nplugins = [\"pydantic.mypy\"]\nfollow_imports = \"silent\"\nwarn_redundant_casts = true\nwarn_unused_ignores = true\ndisallow_any_generics = true\ncheck_untyped_defs = true\n</code></pre>"},{"location":"user-guide/examples/#tips-and-tricks","title":"Tips and Tricks","text":"<ol> <li>Gradual Adoption: Start with basic shared configurations and gradually expand</li> <li>Version Control: Keep <code>shared-config.toml</code> in version control</li> <li>Documentation: Document project-specific overrides</li> <li>Regular Updates: Keep shared configurations up to date with latest best practices</li> <li>Testing: Validate configurations work across all projects</li> </ol>"}]}